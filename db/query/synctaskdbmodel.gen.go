// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"jtrans/db/models"
)

func newFileSyncTask(db *gorm.DB, opts ...gen.DOOption) fileSyncTask {
	_fileSyncTask := fileSyncTask{}

	_fileSyncTask.fileSyncTaskDo.UseDB(db, opts...)
	_fileSyncTask.fileSyncTaskDo.UseModel(&models.FileSyncTask{})

	tableName := _fileSyncTask.fileSyncTaskDo.TableName()
	_fileSyncTask.ALL = field.NewAsterisk(tableName)
	_fileSyncTask.ID = field.NewUint(tableName, "Id")
	_fileSyncTask.Order = field.NewInt(tableName, "Order")
	_fileSyncTask.Type = field.NewInt(tableName, "Type")
	_fileSyncTask.FileName = field.NewString(tableName, "FileName")
	_fileSyncTask.FilePath = field.NewString(tableName, "FilePath")
	_fileSyncTask.Size = field.NewInt64(tableName, "Size")
	_fileSyncTask.ConfirmKey = field.NewString(tableName, "ConfirmKey")
	_fileSyncTask.State = field.NewInt(tableName, "State")
	_fileSyncTask.MD5Part = field.NewString(tableName, "MD5_Part")
	_fileSyncTask.MD5Ori = field.NewString(tableName, "MD5_Ori")
	_fileSyncTask.CRC64Part = field.NewInt64(tableName, "CRC64_Part")
	_fileSyncTask.RemainParts = field.NewString(tableName, "RemainParts")

	_fileSyncTask.fillFieldMap()

	return _fileSyncTask
}

type fileSyncTask struct {
	fileSyncTaskDo fileSyncTaskDo

	ALL         field.Asterisk
	ID          field.Uint
	Order       field.Int
	Type        field.Int
	FileName    field.String
	FilePath    field.String
	Size        field.Int64
	ConfirmKey  field.String
	State       field.Int
	MD5Part     field.String
	MD5Ori      field.String
	CRC64Part   field.Int64
	RemainParts field.String

	fieldMap map[string]field.Expr
}

func (f fileSyncTask) Table(newTableName string) *fileSyncTask {
	f.fileSyncTaskDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileSyncTask) As(alias string) *fileSyncTask {
	f.fileSyncTaskDo.DO = *(f.fileSyncTaskDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileSyncTask) updateTableName(table string) *fileSyncTask {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewUint(table, "Id")
	f.Order = field.NewInt(table, "Order")
	f.Type = field.NewInt(table, "Type")
	f.FileName = field.NewString(table, "FileName")
	f.FilePath = field.NewString(table, "FilePath")
	f.Size = field.NewInt64(table, "Size")
	f.ConfirmKey = field.NewString(table, "ConfirmKey")
	f.State = field.NewInt(table, "State")
	f.MD5Part = field.NewString(table, "MD5_Part")
	f.MD5Ori = field.NewString(table, "MD5_Ori")
	f.CRC64Part = field.NewInt64(table, "CRC64_Part")
	f.RemainParts = field.NewString(table, "RemainParts")

	f.fillFieldMap()

	return f
}

func (f *fileSyncTask) WithContext(ctx context.Context) IFileSyncTaskDo {
	return f.fileSyncTaskDo.WithContext(ctx)
}

func (f fileSyncTask) TableName() string { return f.fileSyncTaskDo.TableName() }

func (f fileSyncTask) Alias() string { return f.fileSyncTaskDo.Alias() }

func (f fileSyncTask) Columns(cols ...field.Expr) gen.Columns {
	return f.fileSyncTaskDo.Columns(cols...)
}

func (f *fileSyncTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileSyncTask) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 12)
	f.fieldMap["Id"] = f.ID
	f.fieldMap["Order"] = f.Order
	f.fieldMap["Type"] = f.Type
	f.fieldMap["FileName"] = f.FileName
	f.fieldMap["FilePath"] = f.FilePath
	f.fieldMap["Size"] = f.Size
	f.fieldMap["ConfirmKey"] = f.ConfirmKey
	f.fieldMap["State"] = f.State
	f.fieldMap["MD5_Part"] = f.MD5Part
	f.fieldMap["MD5_Ori"] = f.MD5Ori
	f.fieldMap["CRC64_Part"] = f.CRC64Part
	f.fieldMap["RemainParts"] = f.RemainParts
}

func (f fileSyncTask) clone(db *gorm.DB) fileSyncTask {
	f.fileSyncTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileSyncTask) replaceDB(db *gorm.DB) fileSyncTask {
	f.fileSyncTaskDo.ReplaceDB(db)
	return f
}

type fileSyncTaskDo struct{ gen.DO }

type IFileSyncTaskDo interface {
	gen.SubQuery
	Debug() IFileSyncTaskDo
	WithContext(ctx context.Context) IFileSyncTaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFileSyncTaskDo
	WriteDB() IFileSyncTaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFileSyncTaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFileSyncTaskDo
	Not(conds ...gen.Condition) IFileSyncTaskDo
	Or(conds ...gen.Condition) IFileSyncTaskDo
	Select(conds ...field.Expr) IFileSyncTaskDo
	Where(conds ...gen.Condition) IFileSyncTaskDo
	Order(conds ...field.Expr) IFileSyncTaskDo
	Distinct(cols ...field.Expr) IFileSyncTaskDo
	Omit(cols ...field.Expr) IFileSyncTaskDo
	Join(table schema.Tabler, on ...field.Expr) IFileSyncTaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFileSyncTaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFileSyncTaskDo
	Group(cols ...field.Expr) IFileSyncTaskDo
	Having(conds ...gen.Condition) IFileSyncTaskDo
	Limit(limit int) IFileSyncTaskDo
	Offset(offset int) IFileSyncTaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFileSyncTaskDo
	Unscoped() IFileSyncTaskDo
	Create(values ...*models.FileSyncTask) error
	CreateInBatches(values []*models.FileSyncTask, batchSize int) error
	Save(values ...*models.FileSyncTask) error
	First() (*models.FileSyncTask, error)
	Take() (*models.FileSyncTask, error)
	Last() (*models.FileSyncTask, error)
	Find() ([]*models.FileSyncTask, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.FileSyncTask, err error)
	FindInBatches(result *[]*models.FileSyncTask, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.FileSyncTask) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFileSyncTaskDo
	Assign(attrs ...field.AssignExpr) IFileSyncTaskDo
	Joins(fields ...field.RelationField) IFileSyncTaskDo
	Preload(fields ...field.RelationField) IFileSyncTaskDo
	FirstOrInit() (*models.FileSyncTask, error)
	FirstOrCreate() (*models.FileSyncTask, error)
	FindByPage(offset int, limit int) (result []*models.FileSyncTask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFileSyncTaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fileSyncTaskDo) Debug() IFileSyncTaskDo {
	return f.withDO(f.DO.Debug())
}

func (f fileSyncTaskDo) WithContext(ctx context.Context) IFileSyncTaskDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileSyncTaskDo) ReadDB() IFileSyncTaskDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileSyncTaskDo) WriteDB() IFileSyncTaskDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileSyncTaskDo) Session(config *gorm.Session) IFileSyncTaskDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileSyncTaskDo) Clauses(conds ...clause.Expression) IFileSyncTaskDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileSyncTaskDo) Returning(value interface{}, columns ...string) IFileSyncTaskDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileSyncTaskDo) Not(conds ...gen.Condition) IFileSyncTaskDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileSyncTaskDo) Or(conds ...gen.Condition) IFileSyncTaskDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileSyncTaskDo) Select(conds ...field.Expr) IFileSyncTaskDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileSyncTaskDo) Where(conds ...gen.Condition) IFileSyncTaskDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileSyncTaskDo) Order(conds ...field.Expr) IFileSyncTaskDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileSyncTaskDo) Distinct(cols ...field.Expr) IFileSyncTaskDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileSyncTaskDo) Omit(cols ...field.Expr) IFileSyncTaskDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileSyncTaskDo) Join(table schema.Tabler, on ...field.Expr) IFileSyncTaskDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileSyncTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFileSyncTaskDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileSyncTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) IFileSyncTaskDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileSyncTaskDo) Group(cols ...field.Expr) IFileSyncTaskDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileSyncTaskDo) Having(conds ...gen.Condition) IFileSyncTaskDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileSyncTaskDo) Limit(limit int) IFileSyncTaskDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileSyncTaskDo) Offset(offset int) IFileSyncTaskDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileSyncTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFileSyncTaskDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileSyncTaskDo) Unscoped() IFileSyncTaskDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileSyncTaskDo) Create(values ...*models.FileSyncTask) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileSyncTaskDo) CreateInBatches(values []*models.FileSyncTask, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileSyncTaskDo) Save(values ...*models.FileSyncTask) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileSyncTaskDo) First() (*models.FileSyncTask, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.FileSyncTask), nil
	}
}

func (f fileSyncTaskDo) Take() (*models.FileSyncTask, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.FileSyncTask), nil
	}
}

func (f fileSyncTaskDo) Last() (*models.FileSyncTask, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.FileSyncTask), nil
	}
}

func (f fileSyncTaskDo) Find() ([]*models.FileSyncTask, error) {
	result, err := f.DO.Find()
	return result.([]*models.FileSyncTask), err
}

func (f fileSyncTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.FileSyncTask, err error) {
	buf := make([]*models.FileSyncTask, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileSyncTaskDo) FindInBatches(result *[]*models.FileSyncTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileSyncTaskDo) Attrs(attrs ...field.AssignExpr) IFileSyncTaskDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileSyncTaskDo) Assign(attrs ...field.AssignExpr) IFileSyncTaskDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileSyncTaskDo) Joins(fields ...field.RelationField) IFileSyncTaskDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileSyncTaskDo) Preload(fields ...field.RelationField) IFileSyncTaskDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileSyncTaskDo) FirstOrInit() (*models.FileSyncTask, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.FileSyncTask), nil
	}
}

func (f fileSyncTaskDo) FirstOrCreate() (*models.FileSyncTask, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.FileSyncTask), nil
	}
}

func (f fileSyncTaskDo) FindByPage(offset int, limit int) (result []*models.FileSyncTask, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileSyncTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileSyncTaskDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileSyncTaskDo) Delete(models ...*models.FileSyncTask) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileSyncTaskDo) withDO(do gen.Dao) *fileSyncTaskDo {
	f.DO = *do.(*gen.DO)
	return f
}
